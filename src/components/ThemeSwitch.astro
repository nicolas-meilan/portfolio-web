---
interface Props {
  id: string;
  class?: string;
}

const { class: className, ...otherProps } = Astro.props;

export const THEME_TOGGLE_ID = 'theme-toggle';
export const LIGHT = 'light';
export const DARK = 'dark';
---

<button
  {...otherProps}
  type="button"
  id={otherProps.id}
  class=`${className}
    dark:text-white text-black
    opacity-80
    dark:hover:bg-white/10 hover:bg-black/10 transition
    hover:text-yellow-500 dark:hover:text-yellow-400
    focus:outline-none
    transition hover:scale-110
    rounded-2xl text-sm px-2 py-2`
>
  <svg
    id={`${otherProps.id}${DARK}`}
    class="hidden w-5 h-5 transition hover:scale-110"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    ></path>
  </svg>
  <svg
    id={`${otherProps.id}${LIGHT}`}
    class="hidden w-5 h-5 transition hover:scale-110"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      fill-rule="evenodd"
      clip-rule="evenodd"></path>
  </svg>
</button>

<script
  is:inline
  define:vars={{
    themeToggleId: otherProps.id,
    LIGHT,
    DARK,
  }}
>
  const toggle = document.getElementById(themeToggleId);
  const light = document.getElementById(`${themeToggleId}${LIGHT}`);
  const dark = document.getElementById(`${themeToggleId}${DARK}`);

  const themeEventName = 'themeChanged';
  const themeEvent = new Event(themeEventName);

  if (localStorage.getItem('theme') === DARK) {
    document.documentElement.classList.add(DARK);
    dark.classList.remove('hidden');
    light.classList.add('hidden');
  } else {
    document.documentElement.classList.remove(DARK);
    dark.classList.add('hidden');
    light.classList.remove('hidden');
  }

  window.addEventListener('themeChanged', () => {
    if (localStorage.getItem('theme') === DARK) {
      dark.classList.remove('hidden');
      light.classList.add('hidden');
    } else {
      dark.classList.add('hidden');
      light.classList.remove('hidden');
    }
  });

  toggle.addEventListener('click', () => {
    if (localStorage.getItem('theme') === DARK) {
      localStorage.setItem('theme', LIGHT);
      document.documentElement.classList.remove(DARK);
      dark.classList.add('hidden');
      light.classList.remove('hidden');
    } else {
      localStorage.setItem('theme', DARK);
      document.documentElement.classList.add(DARK);
      dark.classList.remove('hidden');
      light.classList.add('hidden');
    }
    window.dispatchEvent(themeEvent);
  });
</script>
